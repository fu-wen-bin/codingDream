<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ai/capture-learn-word/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ai/capture-learn-word/src/App.tsx" />
              <option name="originalContent" value="import PictureCard from './components/PictureCard'&#10;import { useState } from 'react'&#10;// @ts-ignore&#10;import './App.css'&#10;&#10;// 用户提示词&#10;const userPrompt = `&#10;分析图片内容，找出最能描述该图片的一个单词。尽量选择一个常用的单词，避免使用生僻词。&#10;&#10;返回一个 JSON 对象格式：&#10;{&#10;  &quot;image_description&quot;: &quot;图片的描述&quot;,&#10;  &quot;representative_word&quot;: &quot;最能描述该图片的单词&quot;,&#10;  &quot;example_sentence&quot;: &quot;结合英文单词和图片描述，给出一个简单的例句&quot;,&#10;  &quot;explanation&quot;: &quot;结合图片解析英文单词，段落以Look at ... 开头，将段落分句，每句单独一行。解析的最后给出一个日常生活有关的问句&quot;,&#10;  &quot;example_reply&quot;: [&quot;根据explanation给出的回复1&quot;, &quot;根据explanation给出的回复2&quot;]&#10;}&#10;`&#10;&#10;export default function App () {&#10;&#10;  const [detailExpand, setDetailExpand] = useState(false)&#10;  const [audio, setAudio] = useState('')&#10;  const [sentence, setSentence] = useState('')&#10;  const [imgPreview, setImgPreview] = useState(undefined as string | undefined)&#10;  const [word, setWord] = useState('请上传图片')&#10;  const [explanation, setExplanation] = useState('')&#10;  const [reply, setReply] = useState([] as string[])&#10;&#10;  const submit = async (data: string) =&gt; {&#10;    setImgPreview(data)&#10;    // 图片分析&#10;    const endpoint = 'https://api.moonshot.cn/v1/chat/completions'&#10;&#10;    const headers = {&#10;      // @ts-ignore&#10;      'Authorization': `Bearer ${import.meta.env.VITE_KIMI_API_KEY}`,&#10;      'Content-Type': 'application/json',&#10;    }&#10;    setWord('正在分析图片...')&#10;    const response = await fetch(endpoint, {&#10;      method: 'POST',&#10;      headers,&#10;      body: JSON.stringify({&#10;        model: 'moonshot-v1-8k-vision-preview',&#10;        messages: [&#10;          {&#10;            role: 'user',&#10;            content: [&#10;              {&#10;                type: 'image_url',&#10;                image_url: {&#10;                  url: data,&#10;                },&#10;              },&#10;              {&#10;                type: 'text',&#10;                text: userPrompt,&#10;              },&#10;            ],&#10;          },&#10;        ],&#10;      }),&#10;    })&#10;&#10;    // 处理响应&#10;    const res = await response.json()&#10;    const replyContent = res.choices[0].message.content&#10;    console.log(replyContent)&#10;    &#10;    try {&#10;      // 解析返回的JSON字符串为对象&#10;      const replyData = JSON.parse(replyContent)&#10;      setWord(replyData.representative_word)&#10;      setSentence(replyData.example_sentence)&#10;      setExplanation(replyData.explanation)&#10;      setReply(replyData.example_reply || [])&#10;    } catch (error) {&#10;      console.error('解析API返回数据失败:', error)&#10;      setWord('图片分析失败')&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;container&quot;&gt;&#10;      &lt;PictureCard word={word} submit={submit} audio={audio}/&gt;&#10;      &lt;div className=&quot;output&quot;&gt;&#10;        &lt;div&gt;{sentence}&lt;/div&gt;&#10;        &lt;div className=&quot;detail&quot;&gt;&#10;&#10;          &lt;button onClick={() =&gt; {setDetailExpand(!detailExpand)}}&gt;&#10;            {&#10;              !detailExpand ? 'Talk about it' : 'Fold it'&#10;            }&#10;          &lt;/button&gt;&#10;&#10;          {&#10;            !detailExpand&#10;              ? &lt;div className=&quot;fold&quot;&gt;&lt;/div&gt; :&#10;              &lt;div className=&quot;expand&quot;&gt;&#10;                &lt;img src={imgPreview} alt=&quot;&quot;/&gt;&#10;                &lt;div className=&quot;explanation&quot;&gt;&#10;                  &lt;p&gt;{explanation}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;reply&quot;&gt;&#10;                  {&#10;                    reply.map((item) =&gt; &lt;p key={item}&gt;{item}&lt;/p&gt;)&#10;                  }&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;          }&#10;&#10;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
              <option name="updatedContent" value="import PictureCard from './components/PictureCard'&#10;import { useState } from 'react'&#10;// @ts-ignore&#10;import './App.css'&#10;&#10;// 用户提示词&#10;const userPrompt = `&#10;分析图片内容，找出最能描述该图片的一个单词。尽量选择一个常用的单词，避免使用生僻词。&#10;&#10;返回一个 JSON 对象格式：&#10;{&#10;  &quot;image_description&quot;: &quot;图片的描述&quot;,&#10;  &quot;representative_word&quot;: &quot;最能描述该图片的单词&quot;,&#10;  &quot;example_sentence&quot;: &quot;结合英文单词和图片描述，给出一个简单的例句&quot;,&#10;  &quot;explanation&quot;: &quot;结合图片解析英文单词，段落以Look at ... 开头，将段落分句，每句单独一行。解析的最后给出一个日常生活有关的问句&quot;,&#10;  &quot;example_reply&quot;: [&quot;根据explanation给出的回复1&quot;, &quot;根据explanation给出的回复2&quot;]&#10;}&#10;`&#10;&#10;export default function App () {&#10;&#10;  const [detailExpand, setDetailExpand] = useState(false)&#10;  const [audio, setAudio] = useState('')&#10;  const [sentence, setSentence] = useState('')&#10;  const [imgPreview, setImgPreview] = useState(undefined as string | undefined)&#10;  const [word, setWord] = useState('请上传图片')&#10;  const [explanation, setExplanation] = useState('')&#10;  const [reply, setReply] = useState([] as string[])&#10;&#10;  const submit = async (data: string) =&gt; {&#10;    setImgPreview(data)&#10;    // 图片分析&#10;    const endpoint = 'https://api.moonshot.cn/v1/chat/completions'&#10;&#10;    const headers = {&#10;      // @ts-ignore&#10;      'Authorization': `Bearer ${import.meta.env.VITE_KIMI_API_KEY}`,&#10;      'Content-Type': 'application/json',&#10;    }&#10;    setWord('正在分析图片...')&#10;    const response = await fetch(endpoint, {&#10;      method: 'POST',&#10;      headers,&#10;      body: JSON.stringify({&#10;        model: 'moonshot-v1-8k-vision-preview',&#10;        messages: [&#10;          {&#10;            role: 'user',&#10;            content: [&#10;              {&#10;                type: 'image_url',&#10;                image_url: {&#10;                  url: data,&#10;                },&#10;              },&#10;              {&#10;                type: 'text',&#10;                text: userPrompt,&#10;              },&#10;            ],&#10;          },&#10;        ],&#10;      }),&#10;    })&#10;&#10;    // 处理响应&#10;    const res = await response.json()&#10;    const replyContent = res.choices[0].message.content&#10;    console.log(replyContent)&#10;    &#10;    try {&#10;      // 解析返回的JSON字符串为对象&#10;      const replyData = JSON.parse(replyContent)&#10;      setWord(replyData.representative_word)&#10;      setSentence(replyData.example_sentence)&#10;      setExplanation(replyData.explanation)&#10;      setReply(replyData.example_reply || [])&#10;    } catch (error) {&#10;      console.error('解析API返回数据失败:', error)&#10;      setWord('图片分析失败')&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;container&quot;&gt;&#10;      &lt;PictureCard word={word} submit={submit} audio={audio}/&gt;&#10;      &lt;div className=&quot;output&quot;&gt;&#10;        &lt;div&gt;{sentence}&lt;/div&gt;&#10;        &lt;div className=&quot;detail&quot;&gt;&#10;&#10;          &lt;button onClick={() =&gt; {setDetailExpand(!detailExpand)}}&gt;&#10;            {&#10;              !detailExpand ? 'Talk about it' : 'Fold it'&#10;            }&#10;          &lt;/button&gt;&#10;&#10;          {&#10;            !detailExpand&#10;              ? &lt;div className=&quot;fold&quot;&gt;&lt;/div&gt; :&#10;              &lt;div className=&quot;expand&quot;&gt;&#10;                &lt;img src={imgPreview} alt=&quot;&quot;/&gt;&#10;                &lt;div className=&quot;explanation&quot;&gt;&#10;                  &lt;p&gt;{explanation}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;reply&quot;&gt;&#10;                  {&#10;                    reply.map((item) =&gt; &lt;p key={item}&gt;{item}&lt;/p&gt;)&#10;                  }&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;          }&#10;&#10;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>