<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/tiptap/client/src/components/tiptap-templates/notion-like/notion-like-editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tiptap/client/src/components/tiptap-templates/notion-like/notion-like-editor.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import * as React from &quot;react&quot;&#10;import { EditorContent, EditorContext, useEditor } from &quot;@tiptap/react&quot;&#10;import type { Doc as YDoc } from &quot;yjs&quot;&#10;import type { TiptapCollabProvider } from &quot;@tiptap-pro/provider&quot;&#10;&#10;// --- Tiptap Core Extensions ---&#10;import { StarterKit } from &quot;@tiptap/starter-kit&quot;&#10;import { Image } from &quot;@tiptap/extension-image&quot;&#10;import { Mention } from &quot;@tiptap/extension-mention&quot;&#10;import { TaskList, TaskItem } from &quot;@tiptap/extension-list&quot;&#10;import { Color, TextStyle } from &quot;@tiptap/extension-text-style&quot;&#10;import { Placeholder, Selection } from &quot;@tiptap/extensions&quot;&#10;import { Collaboration } from &quot;@tiptap/extension-collaboration&quot;&#10;import { CollaborationCaret } from &quot;@tiptap/extension-collaboration-caret&quot;&#10;import { Typography } from &quot;@tiptap/extension-typography&quot;&#10;import { Highlight } from &quot;@tiptap/extension-highlight&quot;&#10;import { Superscript } from &quot;@tiptap/extension-superscript&quot;&#10;import { Subscript } from &quot;@tiptap/extension-subscript&quot;&#10;import { TextAlign } from &quot;@tiptap/extension-text-align&quot;&#10;import { Mathematics } from &quot;@tiptap/extension-mathematics&quot;&#10;import { Ai } from &quot;@tiptap-pro/extension-ai&quot;&#10;import { UniqueID } from &quot;@tiptap/extension-unique-id&quot;&#10;import { Emoji, gitHubEmojis } from &quot;@tiptap/extension-emoji&quot;&#10;&#10;// --- Hooks ---&#10;import { useUiEditorState } from &quot;@/hooks/use-ui-editor-state&quot;&#10;&#10;// --- Custom Extensions ---&#10;import { HorizontalRule } from &quot;@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node-extension&quot;&#10;import { UiState } from &quot;@/components/tiptap-extension/ui-state-extension&quot;&#10;&#10;// --- Tiptap Node ---&#10;import { ImageUploadNode } from &quot;@/components/tiptap-node/image-upload-node/image-upload-node-extension&quot;&#10;import &quot;@/components/tiptap-node/blockquote-node/blockquote-node.scss&quot;&#10;import &quot;@/components/tiptap-node/code-block-node/code-block-node.scss&quot;&#10;import &quot;@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node.scss&quot;&#10;import &quot;@/components/tiptap-node/list-node/list-node.scss&quot;&#10;import &quot;@/components/tiptap-node/image-node/image-node.scss&quot;&#10;import &quot;@/components/tiptap-node/heading-node/heading-node.scss&quot;&#10;import &quot;@/components/tiptap-node/paragraph-node/paragraph-node.scss&quot;&#10;&#10;// --- Tiptap UI ---&#10;import { EmojiDropdownMenu } from &quot;@/components/tiptap-ui/emoji-dropdown-menu&quot;&#10;import { MentionDropdownMenu } from &quot;@/components/tiptap-ui/mention-dropdown-menu&quot;&#10;import { SlashDropdownMenu } from &quot;@/components/tiptap-ui/slash-dropdown-menu&quot;&#10;import { DragContextMenu } from &quot;@/components/tiptap-ui/drag-context-menu&quot;&#10;import { AiMenu } from &quot;@/components/tiptap-ui/ai-menu&quot;&#10;&#10;// --- Contexts ---&#10;import { AppProvider } from &quot;@/contexts/app-context&quot;&#10;import { UserProvider, useUser } from &quot;@/contexts/user-context&quot;&#10;import { CollabProvider, useCollab } from &quot;@/contexts/collab-context&quot;&#10;import { AiProvider, useAi } from &quot;@/contexts/ai-context&quot;&#10;&#10;// --- Lib ---&#10;import { handleImageUpload, MAX_FILE_SIZE } from &quot;@/lib/tiptap-utils&quot;&#10;import { TIPTAP_AI_APP_ID } from &quot;@/lib/tiptap-collab-utils&quot;&#10;&#10;// --- Styles ---&#10;import &quot;@/components/tiptap-templates/notion-like/notion-like-editor.scss&quot;&#10;&#10;// --- Content ---&#10;import { NotionEditorHeader } from &quot;@/components/tiptap-templates/notion-like/notion-like-editor-header&quot;&#10;import { MobileToolbar } from &quot;@/components/tiptap-templates/notion-like/notion-like-editor-mobile-toolbar&quot;&#10;import { NotionToolbarFloating } from &quot;@/components/tiptap-templates/notion-like/notion-like-editor-toolbar-floating&quot;&#10;&#10;export interface NotionEditorProps {&#10;  room: string&#10;  placeholder?: string&#10;}&#10;&#10;export interface EditorProviderProps {&#10;  provider: TiptapCollabProvider&#10;  ydoc: YDoc&#10;  placeholder?: string&#10;  aiToken: string | null&#10;}&#10;&#10;/**&#10; * Loading spinner component shown while connecting to the notion server&#10; */&#10;export function LoadingSpinner({ text = &quot;Connecting...&quot; }: { text?: string }) {&#10;  return (&#10;    &lt;div className=&quot;spinner-container&quot;&gt;&#10;      &lt;div className=&quot;spinner-content&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;          &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot;&gt;&lt;/circle&gt;&#10;          &lt;path d=&quot;M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z&quot;&gt;&lt;/path&gt;&#10;        &lt;/svg&gt;&#10;        &lt;div className=&quot;spinner-loading-text&quot;&gt;{text}&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * EditorContent component that renders the actual editor&#10; */&#10;export function EditorContentArea() {&#10;  const { editor } = React.useContext(EditorContext)!&#10;  const {&#10;    aiGenerationIsLoading,&#10;    aiGenerationIsSelection,&#10;    aiGenerationHasMessage,&#10;  } = useUiEditorState(editor)&#10;&#10;  // Selection based effect to handle AI generation acceptance&#10;  React.useEffect(() =&gt; {&#10;    if (!editor) return&#10;&#10;    if (&#10;      !aiGenerationIsLoading &amp;&amp;&#10;      aiGenerationIsSelection &amp;&amp;&#10;      aiGenerationHasMessage&#10;    ) {&#10;      editor.chain().focus().aiAccept().run()&#10;      editor.commands.resetUiState()&#10;    }&#10;  }, [&#10;    aiGenerationHasMessage,&#10;    aiGenerationIsLoading,&#10;    aiGenerationIsSelection,&#10;    editor,&#10;  ])&#10;&#10;  if (!editor) {&#10;    return null&#10;  }&#10;&#10;  return (&#10;    &lt;EditorContent&#10;      editor={editor}&#10;      role=&quot;presentation&quot;&#10;      className=&quot;notion-like-editor-content&quot;&#10;      style={{&#10;        cursor: editor.view.dragging ? &quot;grabbing&quot; : &quot;auto&quot;,&#10;      }}&#10;    &gt;&#10;      &lt;MobileToolbar /&gt;&#10;&#10;      &lt;DragContextMenu /&gt;&#10;      &lt;AiMenu /&gt;&#10;      &lt;EmojiDropdownMenu /&gt;&#10;      &lt;MentionDropdownMenu /&gt;&#10;      &lt;SlashDropdownMenu /&gt;&#10;      &lt;NotionToolbarFloating /&gt;&#10;    &lt;/EditorContent&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * Component that creates and provides the editor instance&#10; */&#10;export function EditorProvider(props: EditorProviderProps) {&#10;  const { provider, ydoc, placeholder = &quot;Start writing...&quot;, aiToken } = props&#10;&#10;  const { user } = useUser()&#10;&#10;  const editor = useEditor({&#10;    immediatelyRender: false,&#10;    shouldRerenderOnTransaction: false,&#10;    editorProps: {&#10;      attributes: {&#10;        class: &quot;notion-like-editor&quot;,&#10;      },&#10;    },&#10;    extensions: [&#10;      StarterKit.configure({&#10;        undoRedo: false,&#10;        horizontalRule: false,&#10;        dropcursor: {&#10;          width: 2,&#10;        },&#10;        link: { openOnClick: false },&#10;      }),&#10;      HorizontalRule,&#10;      TextAlign.configure({ types: [&quot;heading&quot;, &quot;paragraph&quot;] }),&#10;      Collaboration.configure({ document: ydoc }),&#10;      CollaborationCaret.configure({&#10;        provider,&#10;        user: { id: user.id, name: user.name, color: user.color },&#10;      }),&#10;      Placeholder.configure({&#10;        placeholder,&#10;        emptyNodeClass: &quot;is-empty with-slash&quot;,&#10;      }),&#10;      Mention,&#10;      Emoji.configure({&#10;        emojis: gitHubEmojis.filter(&#10;          (emoji) =&gt; !emoji.name.includes(&quot;regional&quot;)&#10;        ),&#10;        forceFallbackImages: true,&#10;      }),&#10;      Mathematics,&#10;      Superscript,&#10;      Subscript,&#10;      Color,&#10;      TextStyle,&#10;      TaskList,&#10;      TaskItem.configure({ nested: true }),&#10;      Highlight.configure({ multicolor: true }),&#10;      Selection,&#10;      Image,&#10;      ImageUploadNode.configure({&#10;        accept: &quot;image/*&quot;,&#10;        maxSize: MAX_FILE_SIZE,&#10;        limit: 3,&#10;        upload: handleImageUpload,&#10;        onError: (error) =&gt; console.error(&quot;Upload failed:&quot;, error),&#10;      }),&#10;      UniqueID,&#10;      Typography,&#10;      UiState,&#10;      Ai.configure({&#10;        appId: TIPTAP_AI_APP_ID,&#10;        token: aiToken || undefined,&#10;        autocompletion: false,&#10;        showDecorations: true,&#10;        hideDecorationsOnStreamEnd: false,&#10;        onLoading: (context) =&gt; {&#10;          context.editor.commands.aiGenerationSetIsLoading(true)&#10;          context.editor.commands.aiGenerationHasMessage(false)&#10;        },&#10;        onChunk: (context) =&gt; {&#10;          context.editor.commands.aiGenerationSetIsLoading(true)&#10;          context.editor.commands.aiGenerationHasMessage(true)&#10;        },&#10;        onSuccess: (context) =&gt; {&#10;          const hasMessage = !!context.response&#10;          context.editor.commands.aiGenerationSetIsLoading(false)&#10;          context.editor.commands.aiGenerationHasMessage(hasMessage)&#10;        },&#10;      }),&#10;    ],&#10;  })&#10;&#10;  if (!editor) {&#10;    return &lt;LoadingSpinner /&gt;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;notion-like-editor-wrapper&quot;&gt;&#10;      &lt;EditorContext.Provider value={{ editor }}&gt;&#10;        &lt;NotionEditorHeader /&gt;&#10;        &lt;EditorContentArea /&gt;&#10;      &lt;/EditorContext.Provider&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * Full editor with all necessary providers, ready to use with just a room ID&#10; */&#10;export function NotionEditor({&#10;  room,&#10;  placeholder = &quot;Start writing...&quot;,&#10;}: NotionEditorProps) {&#10;  return (&#10;    &lt;UserProvider&gt;&#10;      &lt;AppProvider&gt;&#10;        &lt;CollabProvider room={room}&gt;&#10;          &lt;AiProvider&gt;&#10;            &lt;NotionEditorContent placeholder={placeholder} /&gt;&#10;          &lt;/AiProvider&gt;&#10;        &lt;/CollabProvider&gt;&#10;      &lt;/AppProvider&gt;&#10;    &lt;/UserProvider&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * Internal component that handles the editor loading state&#10; */&#10;export function NotionEditorContent({ placeholder }: { placeholder?: string }) {&#10;  const { provider, ydoc } = useCollab()&#10;  const { aiToken } = useAi()&#10;&#10;  if (!provider || !aiToken) {&#10;    return &lt;LoadingSpinner /&gt;&#10;  }&#10;&#10;  return (&#10;    &lt;EditorProvider&#10;      provider={provider}&#10;      ydoc={ydoc}&#10;      placeholder={placeholder}&#10;      aiToken={aiToken}&#10;    /&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot; // 声明这是一个客户端组件，不会在服务器端渲染&#10;&#10;import * as React from &quot;react&quot;&#10;import { EditorContent, EditorContext, useEditor } from &quot;@tiptap/react&quot; // 导入 Tiptap 编辑器核心组件&#10;import type { Doc as YDoc } from &quot;yjs&quot; // 导入 Yjs 文档类型，用于协作编辑&#10;import type { TiptapCollabProvider } from &quot;@tiptap-pro/provider&quot; // 导入协作提供者类型&#10;&#10;// --- Tiptap 核心扩展 ---&#10;import { StarterKit } from &quot;@tiptap/starter-kit&quot; // 包含基本编辑功能的扩展集合&#10;import { Image } from &quot;@tiptap/extension-image&quot; // 图片扩展&#10;import { Mention } from &quot;@tiptap/extension-mention&quot; // @提及功能扩展&#10;import { TaskList, TaskItem } from &quot;@tiptap/extension-list&quot; // 任务列表扩展&#10;import { Color, TextStyle } from &quot;@tiptap/extension-text-style&quot; // 文本样式和颜色扩展&#10;import { Placeholder, Selection } from &quot;@tiptap/extensions&quot; // 占位符和选择扩展&#10;import { Collaboration } from &quot;@tiptap/extension-collaboration&quot; // 协作编辑扩展&#10;import { CollaborationCaret } from &quot;@tiptap/extension-collaboration-caret&quot; // 协作光标扩展&#10;import { Typography } from &quot;@tiptap/extension-typography&quot; // 排版扩展&#10;import { Highlight } from &quot;@tiptap/extension-highlight&quot; // 高亮扩展&#10;import { Superscript } from &quot;@tiptap/extension-superscript&quot; // 上标扩展&#10;import { Subscript } from &quot;@tiptap/extension-subscript&quot; // 下标扩展&#10;import { TextAlign } from &quot;@tiptap/extension-text-align&quot; // 文本对齐扩展&#10;import { Mathematics } from &quot;@tiptap/extension-mathematics&quot; // 数学公式扩展&#10;import { Ai } from &quot;@tiptap-pro/extension-ai&quot; // AI 辅助功能扩展&#10;import { UniqueID } from &quot;@tiptap/extension-unique-id&quot; // 唯一 ID 扩展&#10;import { Emoji, gitHubEmojis } from &quot;@tiptap/extension-emoji&quot; // 表情符号扩展&#10;&#10;// --- 自定义钩子 ---&#10;import { useUiEditorState } from &quot;@/hooks/use-ui-editor-state&quot; // 用于管理编辑器 UI 状态的钩子&#10;&#10;// --- 自定义扩展 ---&#10;import { HorizontalRule } from &quot;@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node-extension&quot; // 自定义水平线扩展&#10;import { UiState } from &quot;@/components/tiptap-extension/ui-state-extension&quot; // UI 状态扩展&#10;&#10;// --- Tiptap 节点组件 ---&#10;import { ImageUploadNode } from &quot;@/components/tiptap-node/image-upload-node/image-upload-node-extension&quot; // 图片上传节点扩展&#10;// 导入各种节点的样式&#10;import &quot;@/components/tiptap-node/blockquote-node/blockquote-node.scss&quot;&#10;import &quot;@/components/tiptap-node/code-block-node/code-block-node.scss&quot;&#10;import &quot;@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node.scss&quot;&#10;import &quot;@/components/tiptap-node/list-node/list-node.scss&quot;&#10;import &quot;@/components/tiptap-node/image-node/image-node.scss&quot;&#10;import &quot;@/components/tiptap-node/heading-node/heading-node.scss&quot;&#10;import &quot;@/components/tiptap-node/paragraph-node/paragraph-node.scss&quot;&#10;&#10;// --- Tiptap UI 组件 ---&#10;import { EmojiDropdownMenu } from &quot;@/components/tiptap-ui/emoji-dropdown-menu&quot; // 表情选择菜单&#10;import { MentionDropdownMenu } from &quot;@/components/tiptap-ui/mention-dropdown-menu&quot; // @提及菜单&#10;import { SlashDropdownMenu } from &quot;@/components/tiptap-ui/slash-dropdown-menu&quot; // 斜线命令菜单&#10;import { DragContextMenu } from &quot;@/components/tiptap-ui/drag-context-menu&quot; // 拖拽上下文菜单&#10;import { AiMenu } from &quot;@/components/tiptap-ui/ai-menu&quot; // AI 功能菜单&#10;&#10;// --- 上下文提供者 ---&#10;import { AppProvider } from &quot;@/contexts/app-context&quot; // 应用上下文提供者&#10;import { UserProvider, useUser } from &quot;@/contexts/user-context&quot; // 用户上下文提供者和钩子&#10;import { CollabProvider, useCollab } from &quot;@/contexts/collab-context&quot; // 协作上下文提供者和钩子&#10;import { AiProvider, useAi } from &quot;@/contexts/ai-context&quot; // AI 上下文提供者和钩子&#10;&#10;// --- 工具函数 ---&#10;import { handleImageUpload, MAX_FILE_SIZE } from &quot;@/lib/tiptap-utils&quot; // 图片上传处理函数和最大文件大小限制&#10;import { TIPTAP_AI_APP_ID } from &quot;@/lib/tiptap-collab-utils&quot; // Tiptap AI 应用 ID&#10;&#10;// --- 样式 ---&#10;import &quot;@/components/tiptap-templates/notion-like/notion-like-editor.scss&quot; // 编辑器主样式&#10;&#10;// --- 内容组件 ---&#10;import { NotionEditorHeader } from &quot;@/components/tiptap-templates/notion-like/notion-like-editor-header&quot; // 编辑器头部组件&#10;import { MobileToolbar } from &quot;@/components/tiptap-templates/notion-like/notion-like-editor-mobile-toolbar&quot; // 移动端工具栏&#10;import { NotionToolbarFloating } from &quot;@/components/tiptap-templates/notion-like/notion-like-editor-toolbar-floating&quot; // 浮动工具栏&#10;&#10;export interface NotionEditorProps {&#10;  room: string // 协作房间 ID&#10;  placeholder?: string // 编辑器占位文本&#10;}&#10;&#10;export interface EditorProviderProps {&#10;  provider: TiptapCollabProvider // 协作提供者实例&#10;  ydoc: YDoc // Yjs 文档实例&#10;  placeholder?: string // 编辑器占位文本&#10;  aiToken: string | null // AI 功能的认证令牌&#10;}&#10;&#10;/**&#10; * 加载旋转器组件，在连接到 Notion 服务器时显示&#10; */&#10;export function LoadingSpinner({ text = &quot;Connecting...&quot; }: { text?: string }) {&#10;  return (&#10;    &lt;div className=&quot;spinner-container&quot;&gt;&#10;      &lt;div className=&quot;spinner-content&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;          &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot;&gt;&lt;/circle&gt;&#10;          &lt;path d=&quot;M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z&quot;&gt;&lt;/path&gt;&#10;        &lt;/svg&gt;&#10;        &lt;div className=&quot;spinner-loading-text&quot;&gt;{text}&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * 编辑器内容组件，渲染实际的编辑器界面&#10; */&#10;export function EditorContentArea() {&#10;  const { editor } = React.useContext(EditorContext)! // 从上下文获取编辑器实例&#10;  const {&#10;    aiGenerationIsLoading, // AI 生成是否正在加载&#10;    aiGenerationIsSelection, // AI 生成是否基于选择&#10;    aiGenerationHasMessage, // AI 生成是否有消息&#10;  } = useUiEditorState(editor) // 使用自定义钩子获取编辑器 UI 状态&#10;&#10;  // 基于选择的效果处理 AI 生成接受&#10;  React.useEffect(() =&gt; {&#10;    if (!editor) return&#10;&#10;    // 当 AI 生成完成、基于选择且有消息时，自动接受 AI 生成内容&#10;    if (&#10;      !aiGenerationIsLoading &amp;&amp;&#10;      aiGenerationIsSelection &amp;&amp;&#10;      aiGenerationHasMessage&#10;    ) {&#10;      editor.chain().focus().aiAccept().run() // 接受 AI 生成内容&#10;      editor.commands.resetUiState() // 重置 UI 状态&#10;    }&#10;  }, [&#10;    aiGenerationHasMessage,&#10;    aiGenerationIsLoading,&#10;    aiGenerationIsSelection,&#10;    editor,&#10;  ])&#10;&#10;  if (!editor) {&#10;    return null&#10;  }&#10;&#10;  return (&#10;    &lt;EditorContent&#10;      editor={editor}&#10;      role=&quot;presentation&quot;&#10;      className=&quot;notion-like-editor-content&quot;&#10;      style={{&#10;        cursor: editor.view.dragging ? &quot;grabbing&quot; : &quot;auto&quot;, // 拖拽时改变光标样式&#10;      }}&#10;    &gt;&#10;      &lt;MobileToolbar /&gt; {/* 移动端工具栏 */}&#10;&#10;      {/* 各种菜单和工具栏组件 */}&#10;      &lt;DragContextMenu /&gt;&#10;      &lt;AiMenu /&gt;&#10;      &lt;EmojiDropdownMenu /&gt;&#10;      &lt;MentionDropdownMenu /&gt;&#10;      &lt;SlashDropdownMenu /&gt;&#10;      &lt;NotionToolbarFloating /&gt;&#10;    &lt;/EditorContent&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * 编辑器提供者组件，创建并提供编辑器实例&#10; */&#10;export function EditorProvider(props: EditorProviderProps) {&#10;  const { provider, ydoc, placeholder = &quot;Start writing...&quot;, aiToken } = props&#10;&#10;  const { user } = useUser() // 获取当前用户信息&#10;&#10;  const editor = useEditor({&#10;    immediatelyRender: false, // 不立即渲染&#10;    shouldRerenderOnTransaction: false, // 事务更新时不重新渲染&#10;    editorProps: {&#10;      attributes: {&#10;        class: &quot;notion-like-editor&quot;, // 编辑器根元素的类名&#10;      },&#10;    },&#10;    extensions: [&#10;      // 配置 Tiptap 核心扩展&#10;      StarterKit.configure({&#10;        undoRedo: false, // 禁用内置撤销重做，由 Yjs 处理&#10;        horizontalRule: false, // 禁用内置水平线，使用自定义版本&#10;        dropcursor: {&#10;          width: 2, // 拖放光标宽度&#10;        },&#10;        link: { openOnClick: false }, // 点击链接不自动打开&#10;      }),&#10;      HorizontalRule, // 自定义水平线&#10;      TextAlign.configure({ types: [&quot;heading&quot;, &quot;paragraph&quot;] }), // 文本对齐，应用于标题和段落&#10;      Collaboration.configure({ document: ydoc }), // 配置协作编辑，使用 Yjs 文档&#10;      CollaborationCaret.configure({&#10;        provider, // 协作提供者&#10;        user: { id: user.id, name: user.name, color: user.color }, // 用户信息，用于显示光标&#10;      }),&#10;      Placeholder.configure({&#10;        placeholder, // 占位文本&#10;        emptyNodeClass: &quot;is-empty with-slash&quot;, // 空节点的类名&#10;      }),&#10;      Mention, // @提及功能&#10;      Emoji.configure({&#10;        emojis: gitHubEmojis.filter(&#10;          (emoji) =&gt; !emoji.name.includes(&quot;regional&quot;) // 过滤掉区域相关的表情符号&#10;        ),&#10;        forceFallbackImages: true, // 强制使用回退图片&#10;      }),&#10;      Mathematics, // 数学公式支持&#10;      Superscript, // 上标&#10;      Subscript, // 下标&#10;      Color, // 文本颜色&#10;      TextStyle, // 文本样式&#10;      TaskList, // 任务列表&#10;      TaskItem.configure({ nested: true }), // 支持嵌套的任务项&#10;      Highlight.configure({ multicolor: true }), // 多彩高亮&#10;      Selection, // 选择扩展&#10;      Image, // 图片支持&#10;      ImageUploadNode.configure({&#10;        accept: &quot;image/*&quot;, // 接受所有图片类型&#10;        maxSize: MAX_FILE_SIZE, // 最大文件大小&#10;        limit: 3, // 一次最多上传 3 个文件&#10;        upload: handleImageUpload, // 图片上传处理函数&#10;        onError: (error) =&gt; console.error(&quot;Upload failed:&quot;, error), // 上传失败回调&#10;      }),&#10;      UniqueID, // 唯一 ID&#10;      Typography, // 排版增强&#10;      UiState, // UI 状态管理&#10;      Ai.configure({&#10;        appId: TIPTAP_AI_APP_ID, // AI 应用 ID&#10;        token: aiToken || undefined, // AI 令牌&#10;        autocompletion: false, // 禁用自动完成&#10;        showDecorations: true, // 显示装饰&#10;        hideDecorationsOnStreamEnd: false, // 流结束时不隐藏装饰&#10;        onLoading: (context) =&gt; {&#10;          // AI 加载时的回调&#10;          context.editor.commands.aiGenerationSetIsLoading(true)&#10;          context.editor.commands.aiGenerationHasMessage(false)&#10;        },&#10;        onChunk: (context) =&gt; {&#10;          // 接收 AI 生成内容块时的回调&#10;          context.editor.commands.aiGenerationSetIsLoading(true)&#10;          context.editor.commands.aiGenerationHasMessage(true)&#10;        },&#10;        onSuccess: (context) =&gt; {&#10;          // AI 生成成功时的回调&#10;          const hasMessage = !!context.response&#10;          context.editor.commands.aiGenerationSetIsLoading(false)&#10;          context.editor.commands.aiGenerationHasMessage(hasMessage)&#10;        },&#10;      }),&#10;    ],&#10;  })&#10;&#10;  if (!editor) {&#10;    return &lt;LoadingSpinner /&gt; // 编辑器未创建时显示加载中&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;notion-like-editor-wrapper&quot;&gt;&#10;      &lt;EditorContext.Provider value={{ editor }}&gt;&#10;        &lt;NotionEditorHeader /&gt; {/* 编辑器头部 */}&#10;        &lt;EditorContentArea /&gt; {/* 编辑器内容区域 */}&#10;      &lt;/EditorContext.Provider&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * 完整的编辑器组件，包含所有必要的提供者，只需提供房间 ID 即可使用&#10; */&#10;export function NotionEditor({&#10;  room,&#10;  placeholder = &quot;Start writing...&quot;,&#10;}: NotionEditorProps) {&#10;  return (&#10;    &lt;UserProvider&gt; {/* 用户提供者 */}&#10;      &lt;AppProvider&gt; {/* 应用提供者 */}&#10;        &lt;CollabProvider room={room}&gt; {/* 协作提供者，传入房间 ID */}&#10;          &lt;AiProvider&gt; {/* AI 提供者 */}&#10;            &lt;NotionEditorContent placeholder={placeholder} /&gt; {/* 编辑器内容 */}&#10;          &lt;/AiProvider&gt;&#10;        &lt;/CollabProvider&gt;&#10;      &lt;/AppProvider&gt;&#10;    &lt;/UserProvider&gt;&#10;  )&#10;}&#10;&#10;/**&#10; * 内部组件，处理编辑器加载状态&#10; */&#10;export function NotionEditorContent({ placeholder }: { placeholder?: string }) {&#10;  const { provider, ydoc } = useCollab() // 获取协作提供者和文档&#10;  const { aiToken } = useAi() // 获取 AI 令牌&#10;&#10;  if (!provider || !aiToken) {&#10;    return &lt;LoadingSpinner /&gt; // 协作提供者或 AI 令牌未准备好时显示加载中&#10;  }&#10;&#10;  return (&#10;    &lt;EditorProvider&#10;      provider={provider}&#10;      ydoc={ydoc}&#10;      placeholder={placeholder}&#10;      aiToken={aiToken}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>